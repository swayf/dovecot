// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Mailer, Nodemailer, assert, iced, __iced_k, __iced_k_noop,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Nodemailer = require('nodemailer');

  assert = require('assert');

  Mailer = (function() {
    Mailer.prototype.defaults = {
      type: 'SMTP',
      transport: {},
      views: {},
      mail: {
        onFailure: {
          retries: 5,
          minTimeout: 2 * 1000,
          maxTimeout: 5 * 60 * 1000,
          factor: 2,
          randomize: true
        },
        template: {
          filename: '',
          context: {},
          options: {}
        },
        fields: {}
      }
    };

    function Mailer(plugin, options) {
      this.plugin = plugin;
      this.sendEmail = __bind(this.sendEmail, this);
      assert(this.plugin && this.plugin.hapi, 'Invalid plugin argument');
      this.plugin.hapi.utils.assert(this.constructor === Mailer, 'Scheme must be instantiated using new');
      this.Hapi = plugin.hapi;
      this.Utils = this.Hapi.utils;
      this.Boom = this.Hapi.error;
      this.log = plugin.log;
      this.settings = this.Utils.applyToDefaults(this.defaults, options);
      this.mailTransport = Nodemailer.createTransport(this.settings.type, this.settings.transport);
      if (!this._is_empty(this.settings.views)) {
        this.plugin.views(this.settings.views);
      }
    }

    Mailer.prototype.sendEmail = function(request, mailOptions, next) {
      var err, error, errors, mailSettings, rendered, responseStatus, result, settings, timeout, try_number, view_manager, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      mailSettings = this.Utils.applyToDefaults(this.settings.mail, mailOptions);
      (function(__iced_k) {
        var _ref, _ref1, _ref2;
        if ((_ref = mailSettings.template) != null ? _ref.filename : void 0) {
          view_manager = ((_ref1 = request.server.pack._env) != null ? (_ref2 = _ref1.dovecot) != null ? _ref2.views : void 0 : void 0) || request.server._views;
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "index.iced",
              funcname: "Mailer.sendEmail"
            });
            view_manager.render(mailSettings.template.filename, mailSettings.template.context, mailSettings.template.options, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  rendered = arguments[1];
                  return settings = arguments[2];
                };
              })(),
              lineno: 54
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (err) {
              next(err);
            }
            return __iced_k(mailSettings.fields.html = rendered);
          });
        } else {
          return __iced_k();
        }
      })(function() {
        errors = [];
        try_number = 0;
        error = '';
        (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!((error != null) && try_number <= mailSettings.onFailure.retries)) {
              return _break();
            } else {
              try_number++;
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "index.iced",
                  funcname: "Mailer.sendEmail"
                });
                _this.mailTransport.sendMail(mailSettings.fields, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      error = arguments[0];
                      return responseStatus = arguments[1];
                    };
                  })(),
                  lineno: 67
                }));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  if (error) {
                    errors.push(error);
                    (function(__iced_k) {
                      if (try_number <= mailSettings.onFailure.retries) {
                        timeout = mailSettings.onFailure.minTimeout * Math.pow(mailSettings.onFailure.factor, try_number);
                        if (mailSettings.onFailure.randomize) {
                          timeout *= 1 + Math.random();
                        }
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "index.iced",
                            funcname: "Mailer.sendEmail"
                          });
                          setTimeout(__iced_deferrals.defer({
                            lineno: 73
                          }), timeout);
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      } else {
                        return __iced_k();
                      }
                    })(__iced_k);
                  } else {
                    return __iced_k();
                  }
                })(_next);
              });
            }
          };
          _while(__iced_k);
        })(function() {
          if (error) {
            _this.log(['email', 'plugin', 'error'], errors);
            result = _this.Boom.internal(error, errors);
          } else {
            result = responseStatus;
          }
          if (next) {
            return next(result);
          }
        });
      });
    };

    Mailer.prototype._is_empty = function(obj) {
      var key;
      if ((obj == null) || obj.length === 0) {
        return true;
      }
      if ((obj.length != null) && obj.length > 0) {
        return false;
      }
      for (key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          return false;
        }
      }
      return true;
    };

    return Mailer;

  })();

  exports.register = function(plugin, options, next) {
    var createEmailer, default_mailer;
    createEmailer = function(local_options) {
      return new Mailer(plugin, plugin.hapi.utils.applyToDefaults(options, local_options));
    };
    default_mailer = new Mailer(plugin, options);
    if (process.env.NODE_ENV === 'test') {
      exports.mailer = default_mailer;
    }
    plugin.api('createEmailer', createEmailer);
    plugin.api('sendEmail', default_mailer.sendEmail);
    return next();
  };

}).call(this);

//# sourceMappingURL=index.map
