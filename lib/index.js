// Generated by IcedCoffeeScript 1.6.3-f
(function() {
  var Mailer, Nodemailer, iced, __iced_k, __iced_k_noop,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Nodemailer = require("nodemailer");

  Mailer = (function() {
    Mailer.prototype.defaults = {
      type: 'SMTP',
      transport: {},
      mail: {
        onFailure: {
          retries: 5,
          minTimeout: 2 * 1000,
          maxTimeout: 5 * 60 * 1000,
          factor: 2,
          randomize: true
        },
        template: {
          filename: '',
          context: {},
          options: {}
        },
        options: {}
      }
    };

    function Mailer(plugin, options) {
      this.sendEmail = __bind(this.sendEmail, this);
      this.plugin = plugin;
      this.Hapi = plugin.hapi;
      this.Utils = this.Hapi.utils;
      this.Boom = this.Hapi.error;
      this.log = plugin.log;
      this.settings = this.Utils.applyToDefaults(this.defaults, options);
      this.mailTransport = Nodemailer.createTransport(this.settings.type, this.settings.transport);
    }

    Mailer.prototype.sendEmail = function(request, mailOptions, next) {
      var error, errors, mailSettings, responseStatus, result, timeout, try_number, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      mailSettings = this.Utils.applyToDefaults(this.settings.mail, mailOptions);
      if (mailSettings.template.filename) {
        mailSettings.options.html = request.server._views.render(mailSettings.template.filename, mailSettings.template.context, mailSettings.template.options);
      }
      errors = [];
      try_number = 0;
      error = '';
      (function(__iced_k) {
        var _results, _while;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!((error != null) && try_number <= mailSettings.onFailure.retries)) {
            return _break();
          } else {
            try_number++;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "index.iced",
                funcname: "Mailer.sendEmail"
              });
              _this.mailTransport.sendMail(mailSettings.options, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    error = arguments[0];
                    return responseStatus = arguments[1];
                  };
                })(),
                lineno: 52
              }));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if (error) {
                  errors.push(error);
                  (function(__iced_k) {
                    if (try_number <= mailSettings.onFailure.retries) {
                      timeout = mailSettings.onFailure.minTimeout * Math.pow(mailSettings.onFailure.factor, try_number);
                      if (mailSettings.onFailure.randomize) {
                        timeout *= 1 + Math.random();
                      }
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "index.iced",
                          funcname: "Mailer.sendEmail"
                        });
                        setTimeout(__iced_deferrals.defer({
                          lineno: 58
                        }), timeout);
                        __iced_deferrals._fulfill();
                      })(__iced_k);
                    } else {
                      return __iced_k();
                    }
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(_next);
            });
          }
        };
        _while(__iced_k);
      })(function() {
        if (error) {
          _this.log(['email', 'plugin', 'error'], errors);
          result = _this.Boom.internal(error, errors);
        } else {
          result = responseStatus;
        }
        if (next) {
          return next(result);
        }
      });
    };

    return Mailer;

  })();

  exports.register = function(plugin, options, next) {
    exports.mailer = new Mailer(plugin, options);
    plugin.api("sendEmail", exports.mailer.sendEmail);
    return next();
  };

}).call(this);

//# sourceMappingURL=index.map
